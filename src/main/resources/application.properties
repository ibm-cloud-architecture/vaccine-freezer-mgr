quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
quarkus.http.port=8080

#################################
# Source to Image to openshift  
quarkus.openshift.expose=true
quarkus.container-image.group=ibmcase
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.openshift.labels.app=freezer-mgr
quarkus.container-image.name=freezer-mgr
# Properties to build yamls
quarkus.openshift.env.configmaps=freezer-mgr-cm
quarkus.openshift.env.secrets=freezer-mgr-secret
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=${KAFKA_CA_CERT_NAME:kafka-cluster-ca-cert}
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=${KAFKA_CA_CERT_NAME:kafka-cluster-ca-cert}
# TLS user
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.from-secret=${KAFKA_USER:tls-user}
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.with-key=user.password
quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=${KAFKA_USER:tls-user}

kafka.bootstrap.servers=localhost:9092

%prod.kafka.security.protocol=SSL
%prod.kafka.ssl.protocol=TLSv1.2
%prod.kafka.ssl.trustore.location=/deployments/certs/server/ca.p12
%prod.kafka.ssl.trustore.type=PKCS12
%prod.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
%prod.kafka.ssl.keystore.type=PKCS12

mp.messaging.incoming.reefer-alerts.connector=smallrye-kafka
mp.messaging.incoming.reefer-alerts.topic=vaccine.reeferAlerts
mp.messaging.incoming.reefer-alerts.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.reefer-alerts.value.deserializer=ibm.tgtm.eda.infrastructure.events.ReeferAlertDeserializer


mp.messaging.outgoing.reefers.connector=smallrye-kafka
mp.messaging.outgoing.reefers.topic=${REEFER_TOPIC:vaccine.reefers}
mp.messaging.outgoing.reefers.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.reefers.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer
